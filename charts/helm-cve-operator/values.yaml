githubReleasesMonitor:
  apiVersion: ${GITHUB_RELEASES_MONITOR_API_VERSION}
  name: ${GITHUB_RELEASES_MONITOR_NAME}
  labels:
    name: ${GITHUB_RELEASES_MONITOR_LABEL_NAME}
    managedBy: ${GITHUB_RELEASES_MONITOR_LABEL_MANAGED_BY}
  spec:
    url: ${GITHUB_RELEASES_MONITOR_SPEC_URL}
    monitorFrom: ${GITHUB_RELEASES_MONITOR_SPEC_MONITOR_FROM}
 
rbac:
  clusterRole:
    name: ${RBAC_CLUSTER_ROLE_NAME}
  clusterRoleBinding:
    name: ${RBAC_CLUSTER_ROLE_BINDING_NAME}
  serviceAccount:
    name: ${RBAC_SERVICE_ACCOUNT_NAME}
    namespace: ${RBAC_SERVICE_ACCOUNT_NAMESPACE}
 
controllerManager:
  replicas: ${CONTROLLER_MANAGER_REPLICAS}
  manager:
    args:
    - --metrics-bind-address=${CONTROLLER_MANAGER_METRICS_BIND_ADDRESS}
    - --leader-elect
    - --health-probe-bind-address=${CONTROLLER_MANAGER_HEALTH_PROBE_BIND_ADDRESS}
    image:
      repository: ${CONTROLLER_MANAGER_IMAGE_REPOSITORY}
      tag: ${CONTROLLER_MANAGER_IMAGE_TAG}
    resources:
      limits:
        cpu: ${CONTROLLER_MANAGER_RESOURCES_LIMITS_CPU}
        memory: ${CONTROLLER_MANAGER_RESOURCES_LIMITS_MEMORY}
      requests:
        cpu: ${CONTROLLER_MANAGER_RESOURCES_REQUESTS_CPU}
        memory: ${CONTROLLER_MANAGER_RESOURCES_REQUESTS_MEMORY}
    containerSecurityContext:
      allowPrivilegeEscalation: ${CONTROLLER_MANAGER_SECURITY_CONTEXT_ALLOW_PRIVILEGE_ESCALATION}
      capabilities:
        drop: ${CONTROLLER_MANAGER_SECURITY_CONTEXT_CAPABILITIES_DROP}
    env:
      PROCESS_IMAGE: ${CONTROLLER_MANAGER_ENV_PROCESS_IMAGE}
  serviceAccount:
    annotations: ${CONTROLLER_MANAGER_SERVICE_ACCOUNT_ANNOTATIONS}
  kubernetesClusterDomain: ${CONTROLLER_MANAGER_KUBERNETES_CLUSTER_DOMAIN}
 
metricsService:
  ports:
  - name: ${METRICS_SERVICE_PORT_NAME}
    port: ${METRICS_SERVICE_PORT_PORT}
    protocol: ${METRICS_SERVICE_PORT_PROTOCOL}
    targetPort: ${METRICS_SERVICE_PORT_TARGET_PORT}
  type: ${METRICS_SERVICE_TYPE}
 
kafka:
  username: ${KAFKA_USERNAME}
  password: ${KAFKA_PASSWORD}
  broker1: ${KAFKA_BROKER1}
  broker2: ${KAFKA_BROKER2}
  broker3: ${KAFKA_BROKER3}
  topic: ${KAFKA_TOPIC}
 
namespace: ${NAMESPACE}
 
processor:
  image: ${PROCESSOR_IMAGE}
 
networkPolicy:
  controlPlaneLabel: ${NETWORK_POLICY_CONTROL_PLANE_LABEL}
  egress:
    cidr: ${NETWORK_POLICY_EGRESS_CIDR}
    port: ${NETWORK_POLICY_EGRESS_PORT}
 
secrets:
  myregistrykey:
    dockerconfigjson: ${SECRETS_MYREGISTRYKEY_DOCKERCONFIGJSON}
  imagePullSecrets:
    - name: ${SECRETS_IMAGE_PULL_SECRETS_NAME}