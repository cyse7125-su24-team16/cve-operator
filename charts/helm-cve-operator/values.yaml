rbac:
  clusterRole:
    name: ${cluster_role_name}
  clusterRoleBinding:
    name: ${cluster_role_binding_name}
  serviceAccount:
    name: ${service_account_name}
    namespace: ${service_account_namespace}
controllerManager:
  replicas: ${controller_replicas}
  manager:
    args:
    - --metrics-bind-address=:${metrics_bind_address}
    - --leader-elect
    - --health-probe-bind-address=:${health_probe_bind_address}
    image:
      repository: ${manager_image_repository}
      tag: ${manager_image_tag}
    resources:
      limits:
        cpu: ${manager_cpu_limits}
        memory: ${manager_memory_limits}
      requests:
        cpu: ${manager_cpu_requests}
        memory: ${manager_memory_requests}
    containerSecurityContext:
      allowPrivilegeEscalation: ${allow_privilege_escalation}
      capabilities:
        drop:
        - ALL
    env:
      PROCESS_IMAGE: ${process_image}
  serviceAccount:
    annotations: ${service_account_annotations}
  kubernetesClusterDomain: ${kubernetes_cluster_domain}
  hpa:
    minReplicas: ${hpa_min_replicas}
    maxReplicas: ${hpa_max_replicas}
    targetCPUUtilizationPercentage: ${hpa_target_cpu_utilization_percentage}
  pdb:
    minAvailable: ${pdb_min_available}
metricsService:
  ports:
  - name: ${metrics_service_port_name}
    port: ${metrics_service_port}
    protocol: ${metrics_service_protocol}
    targetPort: ${metrics_service_target_port}
  type: ${metrics_service_type}
kafka:
  username: ${kafka_username}
  password: ${kafka_password}
  broker1: ${kafka_broker1}
  broker2: ${kafka_broker2}
  broker3: ${kafka_broker3}
  topic: ${kafka_topic}
namespace: ${namespace}
processor:
  image: ${processor_image}
networkPolicy:
  controlPlaneLabel: ${network_policy_control_plane_label}
  egress:
    cidr: ${network_policy_egress_cidr}
    port: ${network_policy_egress_port}
secrets:
  myregistrykey:
    dockerconfigjson: ${dockerconfigjson}
  imagePullSecrets:
    - name: ${image_pull_secret_name}