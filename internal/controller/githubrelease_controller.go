package controller

import (
	"context"
	"fmt"
	"strings"

	webappv1 "cyse7125-su24-team16/cve-operator/api/v1"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"
)

const finalizerName = "githubreleases.example.com/finalizer"

type GitHubReleaseReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

func (r *GitHubReleaseReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	var release webappv1.GitHubRelease
	if err := r.Get(ctx, req.NamespacedName, &release); err != nil {
		log.Error(err, "unable to fetch GitHubRelease")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Check if the GitHubRelease is being deleted
	if release.DeletionTimestamp != nil {
		if containsString(release.GetFinalizers(), finalizerName) {
			// Finalizer logic
			if err := r.finalizeGitHubRelease(ctx, &release); err != nil {
				return ctrl.Result{}, err
			}

			// Remove finalizer after cleanup
			release.SetFinalizers(removeString(release.GetFinalizers(), finalizerName))
			if err := r.Update(ctx, &release); err != nil {
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{}, nil
	}

	// Add finalizer if it doesn't exist
	if !containsString(release.GetFinalizers(), finalizerName) {
		release.SetFinalizers(append(release.GetFinalizers(), finalizerName))
		if err := r.Update(ctx, &release); err != nil {
			return ctrl.Result{}, err
		}
	}

	// Your existing reconcile logic
	var deltaAssetURL string
	for _, asset := range release.Spec.ReleaseDetails.Assets {
		if containsSubstring(asset.Name, "delta") {
			deltaAssetURL = asset.BrowserDownloadURL
			break
		}
	}

	if deltaAssetURL == "" {
		log.Info("No delta asset found")
		return ctrl.Result{}, nil
	}

	// Update the secret with ZIP_URL
	secret := &corev1.Secret{}
	secretName := fmt.Sprintf("%s-app-secret", release.Name)
	if err := r.Get(ctx, client.ObjectKey{Name: secretName, Namespace: release.Namespace}, secret); err != nil {
		if client.IgnoreNotFound(err) == nil {
			// Secret does not exist, create a new one
			secret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      secretName,
					Namespace: release.Namespace,
				},
				Data: map[string][]byte{
					"ZIP_URL": []byte(deltaAssetURL),
				},
			}
			if err := controllerutil.SetControllerReference(&release, secret, r.Scheme); err != nil {
				return ctrl.Result{}, err
			}
			if err := r.Create(ctx, secret); err != nil {
				return ctrl.Result{}, err
			}
		} else {
			return ctrl.Result{}, err
		}
	} else {
		// Secret exists, update it
		secret.Data["ZIP_URL"] = []byte(deltaAssetURL)
		if err := r.Update(ctx, secret); err != nil {
			return ctrl.Result{}, err
		}
	}

	jobName := fmt.Sprintf("%s-job", release.Name)
	job := &batchv1.Job{}
	err := r.Get(ctx, client.ObjectKey{Namespace: release.Namespace, Name: jobName}, job)

	if err == nil {
		// Job already exists
		if job.Status.Succeeded > 0 {
			// Job succeeded, update GitHubRelease status
			release.Status.Succeeded = true
			release.Status.JobName = job.Name
			if err := r.Status().Update(ctx, &release); err != nil {
				return ctrl.Result{}, err
			}
		}
		return ctrl.Result{}, nil
	} else if client.IgnoreNotFound(err) != nil {
		return ctrl.Result{}, err
	}

	// Fetch the image from the ConfigMap
	imageConfigMap := &corev1.ConfigMap{}
	if err := r.Get(ctx, client.ObjectKey{Namespace: release.Namespace, Name: "image-config"}, imageConfigMap); err != nil {
		log.Error(err, "unable to fetch image ConfigMap")
		return ctrl.Result{}, err
	}
	processorImage, ok := imageConfigMap.Data["PROCESSOR_IMAGE"]
	if !ok {
		log.Error(fmt.Errorf("PROCESSOR_IMAGE not found in ConfigMap"), "missing PROCESSOR_IMAGE key")
		return ctrl.Result{}, fmt.Errorf("PROCESSOR_IMAGE key not found in ConfigMap")
	}

	// Job doesn't exist, create a new one
	job = &batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name:      jobName,
			Namespace: release.Namespace,
		},
		Spec: batchv1.JobSpec{
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "process-delta",
							Image: processorImage,
							Env: []corev1.EnvVar{
								{
									Name: "ZIP_URL",
									ValueFrom: &corev1.EnvVarSource{
										SecretKeyRef: &corev1.SecretKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: secretName,
											},
											Key: "ZIP_URL",
										},
									},
								},
								{
									Name: "KAFKA_USERNAME",
									ValueFrom: &corev1.EnvVarSource{
										ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: "kafka-config",
											},
											Key: "KAFKA_USERNAME",
										},
									},
								},
								{
									Name: "KAFKA_PASSWORD",
									ValueFrom: &corev1.EnvVarSource{
										SecretKeyRef: &corev1.SecretKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: "kafka-credentials",
											},
											Key: "KAFKA_PASSWORD",
										},
									},
								},
								{
									Name: "KAFKA_BROKER1",
									ValueFrom: &corev1.EnvVarSource{
										ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: "kafka-config",
											},
											Key: "KAFKA_BROKER1",
										},
									},
								},
								{
									Name: "KAFKA_BROKER2",
									ValueFrom: &corev1.EnvVarSource{
										ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: "kafka-config",
											},
											Key: "KAFKA_BROKER2",
										},
									},
								},
								{
									Name: "KAFKA_BROKER3",
									ValueFrom: &corev1.EnvVarSource{
										ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: "kafka-config",
											},
											Key: "KAFKA_BROKER3",
										},
									},
								},
								{
									Name: "KAFKA_TOPIC",
									ValueFrom: &corev1.EnvVarSource{
										ConfigMapKeyRef: &corev1.ConfigMapKeySelector{
											LocalObjectReference: corev1.LocalObjectReference{
												Name: "kafka-config",
											},
											Key: "KAFKA_TOPIC",
										},
									},
								},
							},
						},
					},
					RestartPolicy: corev1.RestartPolicyOnFailure,
				},
			},
		},
	}

	if err := controllerutil.SetControllerReference(&release, job, r.Scheme); err != nil {
		return ctrl.Result{}, err
	}

	if err := r.Create(ctx, job); err != nil {
		log.Error(err, "unable to create Job for GitHubRelease")
		return ctrl.Result{}, err
	}

	release.Status.JobName = job.Name
	release.Status.Succeeded = false
	if err := r.Status().Update(ctx, &release); err != nil {
		return ctrl.Result{}, err
	}

	return ctrl.Result{}, nil
}

func (r *GitHubReleaseReconciler) finalizeGitHubRelease(ctx context.Context, release *webappv1.GitHubRelease) error {
	log := log.FromContext(ctx)

	// Fetch the Job associated with this GitHubRelease
	jobName := fmt.Sprintf("%s-job", release.Name)
	job := &batchv1.Job{}
	err := r.Get(ctx, client.ObjectKey{Namespace: release.Namespace, Name: jobName}, job)

	if err == nil {
		// Delete the Job and its Pods
		propagationPolicy := metav1.DeletePropagationForeground
		if err := r.Delete(ctx, job, &client.DeleteOptions{PropagationPolicy: &propagationPolicy}); err != nil {
			log.Error(err, "unable to delete Job", "jobName", jobName)
			return err
		}
	} else if client.IgnoreNotFound(err) != nil {
		log.Error(err, "unable to fetch Job for deletion", "jobName", jobName)
		return err
	}

	// Additional cleanup logic if needed

	return nil
}

func containsString(slice []string, str string) bool {
	for _, item := range slice {
		if item == str {
			return true
		}
	}
	return false
}

func removeString(slice []string, str string) []string {
	var result []string
	for _, item := range slice {
		if item != str {
			result = append(result, item)
		}
	}
	return result
}

func containsSubstring(s, substr string) bool {
	return strings.Contains(s, substr)
}

// SetupWithManager sets up the controller with the Manager.
func (r *GitHubReleaseReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&webappv1.GitHubRelease{}).
		Complete(r)
}
