package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const GitHubReleasesMonitorFinalizer = "githubreleasesmonitor.finalizer.webapp.cyse7125-su24-team16"

// GitHubReleasesMonitorSpec defines the desired state of GitHubReleasesMonitor
type GitHubReleasesMonitorSpec struct {
	URL         string `json:"url"`
	MonitorFrom string `json:"monitorFrom"`
}

// GitHubReleasesMonitorStatus defines the observed state of GitHubReleasesMonitor
type GitHubReleasesMonitorStatus struct {
	Releases             []string    `json:"releases,omitempty"`
	LastChecked          metav1.Time `json:"lastChecked,omitempty"`
	MonitorFromTimestamp metav1.Time `json:"monitorFromTimestamp,omitempty"`
	Recreated            bool        `json:"recreated,omitempty"`
}

type Release struct {
	URL                string  `json:"url"`
	ID                 int     `json:"id"`
	TagName            string  `json:"tag_name"`
	Name               string  `json:"name"`
	CreatedAt          string  `json:"created_at"`
	PublishedAt        string  `json:"published_at"`
	Assets             []Asset `json:"assets"`
	BrowserDownloadURL string  `json:"browser_download_url"`
}

type Asset struct {
	URL                string `json:"url"`
	ID                 int    `json:"id"`
	Name               string `json:"name"`
	State              string `json:"state"`
	CreatedAt          string `json:"created_at"`
	UpdatedAt          string `json:"updated_at"`
	BrowserDownloadURL string `json:"browser_download_url"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// GitHubReleasesMonitor is the Schema for the githubreleasesmonitors API
type GitHubReleasesMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GitHubReleasesMonitorSpec   `json:"spec,omitempty"`
	Status GitHubReleasesMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitHubReleasesMonitorList contains a list of GitHubReleasesMonitor
type GitHubReleasesMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GitHubReleasesMonitor `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GitHubReleasesMonitor{}, &GitHubReleasesMonitorList{})
}
